@page "/albums/{id:long}"

@inject IDataStorage<DetailedAlbum, long> Storage
@inject IStatusStorage<ExceptionRequest> ExceptionRequest

@inject IImageAPI ImageApi
@inject IAlbumAPI AlbumApi
@inject IJSRuntime JS

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter(Name = "loading")]
    public IStatusStorage<bool> Loading { get; set; } = null!;

    private DetailedAlbum album;

    private ImageDto[] images = [];

    protected async override Task OnInitializedAsync()
    {
        if (Storage.TryGet(Id, out album))
        {
            var response = await AlbumApi.GetDetail(Id);
            Storage.Add(album, Id);
        }
        else
        {
            Loading.Value = true;
            try
            {
                album = await AlbumApi.GetDetail(Id);
            }
            catch (Exception e)
            {
                ExceptionRequest.Value = new(e.Message);
            }
            Loading.Value = false;

            Storage.Add(album, Id);
        }

        var result = await ImageApi.GetImages(album: Id);
        if (result.IsSuccessStatusCode)
        {
            images = result.Content ?? [];
        }
    }
}

<PageTitle>SastImg - @album.Title</PageTitle>

<MRow Class="ma-md-1" AlignContent="AlignContentTypes.Center">

    <MCol Md="6" Class="d-flex">
        <MImage Contain Src="@IAlbumAPI.GetCover(Id)" />
    </MCol>

    <MCol Md="6" Class="align-self-center vstack gap-1">
        <h3 class="text-center mx-5 my-3 my-md-3 ma-md-auto pt-md-3">
            @album.Title
        </h3>

        <div class="d-flex justify-content-center">
            <a href="" class="btn badge rounded-pill bg-info" type="button">
                @album.Category
            </a>
        </div>

        <h6 class="mt-3 text-center text-muted">@album.UpdatedAt</h6>
    </MCol>
</MRow>

<MDivider />

<ImageList Images="images" />